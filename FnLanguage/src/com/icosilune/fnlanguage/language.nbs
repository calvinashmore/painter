# To change this template, choose Tools | Templates
# and open the template in the editor.

#<DEFAULT>:


TOKEN:comment: ( "//" [^"\n" "\r"]* ["\n" "\r"]+ )
TOKEN:comment: ( "/*" - "*/")

TOKEN:string: (
    "\"" ([^ "\\" "\""] |
          ("\\" (. |
                 (["0"-"7"]) |
                 (["0"-"7"] ["0"-"7"]) | 
                 (["0"-"7"] ["0"-"7"] ["0"-"7"])
                 ("^" ["@" "A"-"Z" "["-"_"])
                )
          )
         )* 
    "\""
)

# definition of tokens
#TOKEN:keyword:( "package" | "while" | "if" | "else" | "group" | "type" | "import")
TOKEN:java_keyword:( "abstract" | "continue" | "for" | "new" | "switch" |
                     "assert" | "default" | "goto" | "package" | "synchronized" |
                     "boolean" | "do" | "if" | "private" | "this" |
                     "break" | "double" | "implements" | "protected" | "throw" |
                     "byte" | "else" | "import" | "public" | "throws" |
                     "case" | "enum" | "instanceof" | "return" | "transient" |
                     "catch" | "extends" | "int" | "short" | "try" |
                     "char" | "final" | "interface" | "static" | "void" |
                     "class" | "finally" | "long" | "strictfp" | "volatile" |
                     "const" | "float" | "native" | "super" | "while" )

TOKEN:fn_keyword:( "fn" | "group" | "type" | "in" |
                   "fout" | "eval" | "exec" | "init" |
                   "parameter" | "setup" | "meta" |
                   "slin" | "exin" | "cvar")

TOKEN:operator:( "{" | "}" | "(" | ")" |
                 "+" | "-" | "/" | "%" | "*" |
                 "++" | "--" | "~" | "^" | "|" | "&" | "!" |
                 "&&" | "||" | "<<" | ">>" | ">>>" | "<" | ">" |
                 "<=" | ">=" | "instanceof" | "?" | ":" |
                 "=" | "==" | "!=" | "=+" | "=*" | "=/" | "=%" |
                 "&=" | "^=" | "|=" | "<<=" | ">>=" | ">>>=" |
                 ";" | ".")

TOKEN:fn_type:("Expression" | "Statement" | "Command" | "Accessor")

TOKEN:identifier:( ["a"-"z"] ["a"-"z" "0"-"9"]* )
TOKEN:whitespace:( [" " "\t" "\n" "\r"]+ )

# parser should ignore whitespaces
SKIP:whitespace
SKIP:comment

# definition of grammar
S =  PackageStatement GroupStatement TypeStatement (ImportStatement)* (FnDefinition)*;
#S = (Statement)*;

PackageStatement = "package" Name ";";
GroupStatement = "group" Name ";";
TypeStatement = "type" ("Expression" | "Statement" | "Command" | "Accessor") ";";

ImportStatement = "import" Name ["." "*"] ";";

FnDefinition = "fn" <identifier> "{" (Statement)* "}";

Name = <identifier> ("." <identifier>)*;
Statement = WhileStatement | IfStatement | ExpressionStatement;
WhileStatement = "while" "(" ConditionalExpression ")" Block;
IfStatement = "if" "(" ConditionalExpression ")" Block ["else" Block];
Block = "{" (Statement)* "}";
ConditionalExpression = <identifier>;
ExpressionStatement = <identifier> ";";

# code folding
FOLD:Block

# navigator support
NAVIGATOR:WhileStatement: {
    display_name: "$ConditionalExpression$";
}

# brace completion
COMPLETE "{:}"
COMPLETE "(:)"
COMPLETE "[:]"

# brace matching
BRACE "{:}"
BRACE "(:)"
BRACE "[:]"

# indentation support
INDENT "{:}"
INDENT "(:)"
INDENT "[:]"
INDENT "\\s*(((if|while)\\s*\\(|else\\s*|else\\s+if\\s*\\(|for\\s*\\(.*\\))[^{;]*)"

# error highlighting
MARK:ERROR: {
    type:"Error";
    message:"Syntax error.";
}
MARK:error: {
    type:"Error";
    message:"Unexpected character.";
}

# code completion
COMPLETION:keyword, operator, identifier, whitespace: {
    text1:"while";
    text2:"if";
    text3:"else";
}



