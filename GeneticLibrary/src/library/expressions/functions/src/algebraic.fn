
package library.expressions.functions;
group Algebraic;
type Expression;

import utils.linear.*;

description "alegebraic functions";

// ************
// *** AVERAGES
// ************

fn avg_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble((x.val+y.val)/2);
    }
}

fn avg_i {
    in Integer x;
    in Integer y;
    fout Integer;
    
    eval {
        return (x+y)/2;
    }
}

fn avg_c {
    in Complex x;
    in Complex y;
    fout Complex;

    eval {
        return new Complex(x.x+y.x, x.y+y.y);
    }
}

fn avg_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x+y.x, x.y+y.y);
    }
}

fn avg_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d((x.x+y.x)/2, (x.y+y.y)/2, (x.z+y.z)/2);
    }
}

// ************
// *** ADDITION
// ************

fn add_col {
    in Color x;
    in Color y;
    fout Color;

    eval {
        return new Color(x.r+y.r, x.g+y.g, x.b+y.b);
    }
}

fn add_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble(x.val+y.val);
    }
}

fn add_i {
    in Integer x;
    in Integer y;
    fout Integer;
    
    eval {
        return x+y;
    }
}

fn add_c {
    in Complex x;
    in Complex y;
    fout Complex;

    eval {
        return new Complex(x.x+y.x, x.y+y.y);
    }
}

fn add_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x+y.x, x.y+y.y);
    }
}

fn add_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d(x.x+y.x, x.y+y.y, x.z+y.z);
    }
}

// ***************
// *** SUBTRACTION
// ***************

fn sub_col {
    in Color x;
    in Color y;
    fout Color;

    eval {
        return new Color(x.r-y.r, x.g-y.g, x.b-y.b);
    }
}

fn sub_c {
    in Complex x;
    in Complex y;
    fout Complex;

    eval {
        return new Complex(x.x-y.x, x.y-y.y);
    }
}

fn sub_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble(x.val-y.val);
    }
}

fn sub_i {
    in Integer x;
    in Integer y;
    fout Integer;
    
    eval {
        return x-y;
    }
}

fn sub_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x-y.x, x.y-y.y);
    }
}

fn sub_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d(x.x-y.x, x.y-y.y, x.z-y.z);
    }
}

// *******************
// *** MULITIPLICATION
// *******************

fn mult_col {
    in Color x;
    in LDouble y;
    fout Color;

    eval {
        return new Color(x.r*y.val, x.g*y.val, x.b*y.val);
    }
}

fn mult_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble(x.val*y.val);
    }
}

fn mult_i {
    in Integer x;
    in Integer y;
    fout Integer;
    
    eval {
        return x*y;
    }
}

fn mult_i_d {
    in Integer x;
    in LDouble y;
    fout LDouble;
    
    eval {
        return new LDouble(x*y.val);
    }
}

fn mult_c {
    in Complex x;
    in LDouble y;
    fout Complex;

    eval {
        return new Complex(x.x*y.val, x.y*y.val);
    }
}

fn mult_c_c {
    in Complex x;
    in Complex y;
    fout Complex;

    eval {
        return new Complex(x.x*y.x, x.y*y.y);
    }
}

fn mult_v2 {
    in LVect2d x;
    in LDouble y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x*y.val, x.y*y.val);
    }
}

fn mult_v2_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x*y.x, x.y*y.y);
    }
}

fn mult_v3 {
    in LVect3d x;
    in LDouble y;
    fout LVect3d;

    eval {
        return new LVect3d(x.x*y.val, x.y*y.val, x.z*y.val);
    }
}

fn mult_v3_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d(x.x*y.x, x.y*y.y, x.z*y.z);
    }
}

// *******************
// *** POWERS
// *******************

fn pow_col {
    in Color x;
    in LDouble y;
    fout Color;

    eval {
        return new Color(Math.pow(x.r,y.val), Math.pow(x.g,y.val), Math.pow(x.b,y.val));
    }
}

fn pow_col_col {
    in Color x;
    in Color y;
    fout Color;

    eval {
        return new Color(Math.pow(x.r,y.r), Math.pow(x.g,y.g), Math.pow(x.b,y.b));
    }
}

fn pow_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble(Math.pow(x.val,y.val));
    }
}

fn pow_v2 {
    in LVect2d x;
    in LDouble y;
    fout LVect2d;

    eval {
        return new LVect2d(Math.pow(x.x,y.val), Math.pow(x.y,y.val));
    }
}

fn pow_v2_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(Math.pow(x.x,y.x), Math.pow(x.y,y.y));
    }
}

fn pow_v3 {
    in LVect3d x;
    in LDouble y;
    fout LVect3d;

    eval {
        return new LVect3d(Math.pow(x.x,y.val), Math.pow(x.y,y.val), Math.pow(x.z,y.val));
    }
}

fn pow_v3_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d(Math.pow(x.x,y.x), Math.pow(x.y,y.y), Math.pow(x.z,y.z));
    }
}

// **********
// *** OFFSET
// **********

fn offset_col {
    in Color x;
    fout Color;
    
    parameter Color offset;

    init {
        offset = new Color();
        offset.r = 2*Math.random()-1;
        offset.g = 2*Math.random()-1;
        offset.b = 2*Math.random()-1;
    }

    eval {
        return offset.add(x);
    }
}

fn offset_d {
    in LDouble x;
    fout LDouble;
    
    parameter double offset;

    init {
        offset = 2*Math.random()-1;
    }

    eval {
        return new LDouble(x.val+offset);
    }
}

fn offset_c {
    in Complex x;
    fout Complex;
    
    parameter Complex offset;

    init {
        offset = new Complex();
        offset.x = 2*Math.random()-1;
        offset.y = 2*Math.random()-1;
    }

    eval {
        return offset.add(x);
    }
}

fn offset_v2 {
    in LVect2d x;
    fout LVect2d;
    
    parameter LVect2d offset;

    init {
        offset = new LVect2d();
        offset.x = 2*Math.random()-1;
        offset.y = 2*Math.random()-1;
    }

    eval {
        return offset.add(x);
    }
}

fn offset_v3 {
    in LVect3d x;
    fout LVect3d;
    
    parameter LVect3d offset;

    init {
        offset = new LVect3d();
        offset.x = 2*Math.random()-1;
        offset.y = 2*Math.random()-1;
        offset.z = 2*Math.random()-1;
    }

    eval {
        return offset.add(x);
    }
}

// *********
// *** SCALE
// *********

fn scale_d {
    in LDouble x;
    fout LDouble;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }
}

fn scale_c {
    in Complex x;
    fout Complex;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }
}

fn scale_v2 {
    in LVect2d x;
    fout LVect2d;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }
}

fn scale_v3 {
    in LVect3d x;
    fout LVect3d;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }
}

fn scale_col {
    in Color x;
    fout Color;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }
}

// ***********
// *** MODULUS
// ***********

fn mod_d {
    in LDouble x;
    fout LDouble;

    eval {
        return new LDouble( x.val - Math.floor(x.val) );
    }
}

fn mod_v2 {
    in LVect2d x;
    fout LVect2d;

    eval {
        return new LVect2d(
            x.x - Math.floor(x.x),
            x.y - Math.floor(x.y)
            );
    }
}

fn mod_v3 {
    in LVect3d x;
    fout LVect3d;

    eval {
        return new LVect3d(
            x.x - Math.floor(x.x),
            x.y - Math.floor(x.y),
            x.z - Math.floor(x.z)
            );
    }
}
