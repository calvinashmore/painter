package library.expressions.functions;
group Images;
type Expression;

import utils.linear.*;
import utils.linear.grid.*;
import java.awt.image.*;

description "expressions producing images";

// NOTE: THESE FUNCTIONS ONLY EVALUATE ONCE!!

fn makeImage_monotone_buffer_d {
    in Buffer_d buffer;
    fout BufferedImage;

    private transient BufferedImage image;
    private void makeImage(Buffer_d buffer) {
        ColorGrid cg = new ColorGrid(buffer.getXRes(), buffer.getYRes());

        for (int x = 0; x < buffer.getXRes(); x++) {
            for (int y = 0; y < buffer.getYRes(); y++) {
                double d = 1 - buffer.getValue(x, y).val;
                cg.setValue(x, y, new Color(d, d, d));
            }
        }

        image = cg.makeImage();
    }

    eval {
        if(image == null)
            makeImage(buffer);
        return image;
    }
}

fn makeImage_dualchrome_buffer_d {
    in Buffer_d buffer;
    parameter Color c1;
    parameter Color c2;
    fout BufferedImage;

    init {
        c1 = new Color(Math.random(), Math.random(), Math.random());
        c2 = new Color(Math.random(), Math.random(), Math.random());
    }

    private transient BufferedImage image;
    private void makeImage(Buffer_d buffer) {
        ColorGrid cg = new ColorGrid(buffer.getXRes(), buffer.getYRes());

        for (int x = 0; x < buffer.getXRes(); x++) {
            for (int y = 0; y < buffer.getYRes(); y++) {
                double d = 1 - buffer.getValue(x, y).val;
                Color color = c1.mult(d).add(c2.mult(1-d));
                cg.setValue(x, y, color);
            }
        }

        image = cg.makeImage();
    }

    eval {
        if(image == null)
            makeImage(buffer);
        return image;
    }
}

