
package library.expressions.functions;
group SheepVariations;
type Expression;


import utils.linear.*;
import utils.ifs.*;
import utils.ifs.sheepvariations.*;

description "V2->V2 Variations identified from Scott Draves' paper describing the Fractal Flame algorithm";

// these are the "Variations" described in the paper "The Fractal Flame Algorithm"
// by Scott Draves and Erik Reckase (http://flam3.com/flame.pdf)


// Variation 0, the identity mapping is not included.

fn Sinusoidal_f {
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Sinusoidal();
    }

    eval {
        return function.map(v, new LVect2d());
    }
}
fn Sinusoidal_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Sinusoidal();
    }
    eval {return function;}
}

fn Spherical_f {
    // variation 2
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Spherical();
    }

    eval {
        return function.map(v, new LVect2d());
    }
}
fn Spherical_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Spherical();
    }
    eval {return function;}
}

fn Swirl_f {
    // variation 3
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Swirl();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Swirl_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Swirl();
    }
    eval {return function;}
}

fn Horseshoe_f {
    // variation 4
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Horseshoe();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Horseshoe_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Horseshoe();
    }
    eval {return function;}
}

fn Polar_f {
    // variation 5
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Polar();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Polar_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Polar();
    }
    eval {return function;}
}

fn Handkerchief_f {
    // variation 6
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Handkerchief();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Handkerchief_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Handkerchief();
    }
    eval {return function;}
}

fn Heart_f {
    // variation 7
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Heart();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Heart_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Heart();
    }
    eval {return function;}
}

fn Disc_f {
    // variation 8
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Heart();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Disc_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Disc();
    }
    eval {return function;}
}

fn Spiral_f {
    // variation 9
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Spiral();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Spiral_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Spiral();
    }
    eval {return function;}
}

fn Hyperbolic_f {
    // variation 10
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Hyperbolic();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Hyperbolic_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Hyperbolic();
    }
    eval {return function;}
}

fn Diamond_f {
    // variation 11
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Diamond();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Diamond_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Diamond();
    }
    eval {return function;}
}

fn Ex_f {
    // variation 12
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Ex();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Ex_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Ex();
    }
    eval {return function;}
}

fn Julia_f {
    // variation 13
    fout LVect2d;
    in LVect2d v;

    parameter Integer seed;
    private IFSUtil.Mapping_v2 function;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    setup {
        function = new Julia(new Random(seed));
    }

    eval {return function.map(v, new LVect2d());}
}
fn Julia_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;
    private IFSUtil.Mapping_v2 function;
    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }
    setup {
        function = new Julia(new Random(seed));
    }
    eval {return function;}
}

fn Bent_f {
    // variation 14
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Bent();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Bent_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Bent();
    }
    eval {return function;}
}

fn Waves_f {
    // variation 15
    fout LVect2d;
    in LVect2d v;

    parameter LDouble b;
    parameter LDouble c;
    parameter LDouble e;
    parameter LDouble f;

    init {
        b = new LDouble(2*Math.random()-1);
        e = new LDouble(2*Math.random()-1);
        c = new LDouble(Math.pow(2*Math.random()-1,-2));
        f = new LDouble(Math.pow(2*Math.random()-1,-2));
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Waves(b.val, c.val, e.val, f.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Waves_v {
    fout IFSUtil.Mapping_v2;


    parameter LDouble b;
    parameter LDouble c;
    parameter LDouble e;
    parameter LDouble f;

    init {
        b = new LDouble(2*Math.random()-1);
        e = new LDouble(2*Math.random()-1);
        c = new LDouble(Math.pow(2*Math.random()-1,-2));
        f = new LDouble(Math.pow(2*Math.random()-1,-2));
    }
    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Waves(b.val, c.val, e.val, f.val);
    }
    eval {return function;}
}

fn Fisheye_f {
    // variation 16
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Fisheye();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Fisheye_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Fisheye();
    }
    eval {return function;}
}

fn Popcorn_f {
    // variation 17
    fout LVect2d;
    in LVect2d v;

    parameter LDouble c;
    parameter LDouble f;

    init {
        c = new LDouble(2*Math.random()-1);
        f = new LDouble(2*Math.random()-1);
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Popcorn(c.val, f.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Popcorn_v {
    fout IFSUtil.Mapping_v2;


    parameter LDouble c;
    parameter LDouble f;

    init {
        c = new LDouble(2*Math.random()-1);
        f = new LDouble(2*Math.random()-1);
    }
    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Popcorn(c.val, f.val);
    }
    eval {return function;}
}
fn Exponential_f {
    // variation 18
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Exponential();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Exponential_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Exponential();
    }
    eval {return function;}
}

fn Power_f {
    // variation 19
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Power();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Power_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Power();
    }
    eval {return function;}
}

fn Cosine_f {
    // variation 20
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Cosine();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Cosine_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Cosine();
    }
    eval {return function;}
}

fn Rings_f {
    // variation 21
    fout LVect2d;
    in LVect2d v;
    parameter LDouble c;

    init {
        c = new LDouble(Math.pow(Math.random(),2));
    }
    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Rings(c.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Rings_v {
    fout IFSUtil.Mapping_v2;
    parameter LDouble c;

    init {
        c = new LDouble(Math.pow(Math.random(),2));
    }
    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Rings(c.val);
    }
    eval {return function;}
}

fn Fan_f {
    // variation 22
    fout LVect2d;
    in LVect2d v;

    parameter LDouble t;
    parameter LDouble f;

    init {
        t = new LDouble(Math.PI*Math.pow(Math.random(),2));
        f = new LDouble(2*Math.random()-1);
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Fan(t.val, f.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Fan_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble t;
    parameter LDouble f;

    init {
        t = new LDouble(Math.PI*Math.pow(Math.random(),2));
        f = new LDouble(2*Math.random()-1);
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Fan(t.val, f.val);
    }
    eval {return function;}
}

fn Blob_f {
    // variation 23
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;
    parameter Integer p3;

    init {
        p1 = new LDouble(.5*Math.random());
        p2 = new LDouble(Math.random());
        p3 = (int) (3+5*Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Blob(p1.val, p2.val, p3);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Blob_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble p1;
    parameter LDouble p2;
    parameter Integer p3;

    init {
        p1 = new LDouble(.5*Math.random());
        p2 = new LDouble(Math.random());
        p3 = (int) (3+5*Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Blob(p1.val, p2.val, p3);
    }
    eval {return function;}
}

fn PDJ_f {
    // variation 24
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;
    parameter LDouble p3;
    parameter LDouble p4;

    // this is a Peter deJong style system
    init {
        p1 = new LDouble(Math.random());
        p2 = new LDouble(Math.random());
        p3 = new LDouble(Math.random());
        p4 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new PDJ(p1.val, p2.val, p3.val, p4.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn PDJ_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble p1;
    parameter LDouble p2;
    parameter LDouble p3;
    parameter LDouble p4;

    // this is a Peter deJong style system
    init {
        p1 = new LDouble(Math.random());
        p2 = new LDouble(Math.random());
        p3 = new LDouble(Math.random());
        p4 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new PDJ(p1.val, p2.val, p3.val, p4.val);
    }
    eval {return function;}
}

fn Fan2_f {
    // variation 25
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;

    init {
        p1 = new LDouble(Math.PI*Math.pow(Math.random(),2));
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Fan2(p1.val, p2.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Fan2_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble p1;
    parameter LDouble p2;

    init {
        p1 = new LDouble(Math.PI*Math.pow(Math.random(),2));
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Fan2(p1.val, p2.val);
    }
    eval {return function;}
}

fn Rings2_f {
    // variation 26
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p;

    init {
        p = new LDouble(Math.pow(Math.random(),2));
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Rings2(p.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Rings2_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble p;

    init {
        p = new LDouble(Math.pow(Math.random(),2));
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Rings2(p.val);
    }
    eval {return function;}
}

fn Eyefish_f {
    // variation 27
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Eyefish();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Eyefish_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Eyefish();
    }
    eval {return function;}
}

fn Bubble_f {
    // variation 28
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Bubble();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Bubble_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Bubble();
    }
    eval {return function;}
}

fn Cylinder_f {
    // variation 29
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Cylinder();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Cylinder_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Cylinder();
    }
    eval {return function;}
}

fn Perspective_f {
    // variation 30
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;

    init {
        p1 = new LDouble(Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Perspective(p1.val, p2.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Perspective_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble p1;
    parameter LDouble p2;

    init {
        p1 = new LDouble(Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Perspective(p1.val, p2.val);
    }
    eval {return function;}
}

fn Noise_f {
    // variation 31
    fout LVect2d;
    in LVect2d v;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Noise(new Random(seed));
    }
    eval {return function.map(v, new LVect2d());}
}
fn Noise_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Noise(new Random(seed));
    }
    eval {return function;}
}

fn JuliaN_f {
    // variation 32
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;
    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();

        p1 = new LDouble(3+5*Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new JuliaN(new Random(seed), p1.val, p2.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn JuliaN_v {
    fout IFSUtil.Mapping_v2;
    parameter LDouble p1;
    parameter LDouble p2;
    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();

        p1 = new LDouble(3+5*Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new JuliaN(new Random(seed), p1.val, p2.val);
    }
    eval {return function;}
}


fn JuliaScope_f {
    // variation 32
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;
    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();

        p1 = new LDouble(3+5*Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new JuliaScope(new Random(seed), p1.val, p2.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn JuliaScope_v {
    fout IFSUtil.Mapping_v2;
    parameter LDouble p1;
    parameter LDouble p2;
    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();

        p1 = new LDouble(3+5*Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new JuliaScope(new Random(seed), p1.val, p2.val);
    }
    eval {return function;}
}

fn Blur_f {
    // variation 34
    fout LVect2d;
    //in LVect2d v;

    parameter Integer seed;
    private Random random;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Blur(new Random(seed));
    }
    eval {return function.map(null, new LVect2d());}
}
fn Blur_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Blur(new Random(seed));
    }
    eval {return function;}
}

fn Gaussian_f {
    // variation 35
    fout LVect2d;
    //in LVect2d v;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Gaussian(new Random(seed));
    }
    eval {return function.map(null, new LVect2d());}
}
fn Gaussian_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Gaussian(new Random(seed));
    }
    eval {return function;}
}

fn RadialBlur_f {
    // variation 36
    fout LVect2d;
    in LVect2d v;

    parameter Integer seed;
    parameter LDouble p1;

    init {
        Random rand = new Random();
        seed = rand.nextInt();

        p1 = new LDouble(Math.random()*Math.PI/2);
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new RadialBlur(new Random(seed), p1.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn RadialBlur_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;
    parameter LDouble p1;

    init {
        Random rand = new Random();
        seed = rand.nextInt();

        p1 = new LDouble(Math.random()*Math.PI/2);
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new RadialBlur(new Random(seed), p1.val);
    }
    eval {return function;}
}

fn Pie_f {
    // variation 37
    fout LVect2d;
    in LVect2d v;

    parameter Integer seed;
    parameter LDouble p1;
    parameter LDouble p2;
    parameter LDouble p3;

    init {
        Random rand = new Random();
        seed = rand.nextInt();

        p1 = new LDouble(3+5*Math.random());
        p2 = new LDouble(Math.PI*Math.random());
        p3 = new LDouble(Math.random());
    }


    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Pie(new Random(seed), p1.val, p2.val, p3.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Pie_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;
    parameter LDouble p1;
    parameter LDouble p2;
    parameter LDouble p3;

    init {
        Random rand = new Random();
        seed = rand.nextInt();

        p1 = new LDouble(3+5*Math.random());
        p2 = new LDouble(Math.PI*Math.random());
        p3 = new LDouble(Math.random());
    }


    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Pie(new Random(seed), p1.val, p2.val, p3.val);
    }
    eval {return function;}
}

fn Ngon_f {
    // variation 38
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;
    parameter LDouble p3;
    parameter LDouble p4;

    init {
        p1 = new LDouble(1+4*Math.random());
        p2 = new LDouble(2*Math.PI/(3+5*Math.random()));
        p3 = new LDouble(Math.random());
        p4 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Ngon(p1.val, p2.val, p3.val, p4.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Ngon_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble p1;
    parameter LDouble p2;
    parameter LDouble p3;
    parameter LDouble p4;

    init {
        p1 = new LDouble(1+4*Math.random());
        p2 = new LDouble(2*Math.PI/(3+5*Math.random()));
        p3 = new LDouble(Math.random());
        p4 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Ngon(p1.val, p2.val, p3.val, p4.val);
    }
    eval {return function;}
}

fn Curl_f {
    // variation 39
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;

    init {
        p1 = new LDouble(Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Curl(p1.val, p2.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Curl_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble p1;
    parameter LDouble p2;

    init {
        p1 = new LDouble(Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Curl(p1.val, p2.val);
    }
    eval {return function;}
}

fn Rectangles_f {
    // variation 40
    fout LVect2d;
    in LVect2d v;

    parameter LDouble p1;
    parameter LDouble p2;

    init {
        p1 = new LDouble(Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Rectangles(p1.val, p2.val);
    }
    eval {return function.map(v, new LVect2d());}
}
fn Rectangles_v {
    fout IFSUtil.Mapping_v2;

    parameter LDouble p1;
    parameter LDouble p2;

    init {
        p1 = new LDouble(Math.random());
        p2 = new LDouble(Math.random());
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Rectangles(p1.val, p2.val);
    }
    eval {return function;}
}

fn Arch_f {
    // variation 41
    fout LVect2d;
    //in LVect2d v;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Arch(new Random(seed));
    }
    eval {return function.map(null, new LVect2d());}
}
fn Arch_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Arch(new Random(seed));
    }
    eval {return function;}
}

fn Tangent_f {
    // variation 42
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Tangent();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Tangent_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Tangent();
    }
    eval {return function;}
}

fn Square_f {
    // variation 43
    fout LVect2d;
    //in LVect2d v;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Square(new Random(seed));
    }
    eval {return function.map(null, new LVect2d());}
}
fn Square_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Square(new Random(seed));
    }
    eval {return function;}
}

fn Rays_f {
    // variation 44
    fout LVect2d;
    in LVect2d v;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Rays(new Random(seed));
    }
    eval {return function.map(v, new LVect2d());}
}
fn Rays_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Rays(new Random(seed));
    }
    eval {return function;}
}

fn Blade_f {
    // variation 45
    fout LVect2d;
    in LVect2d v;
    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }


    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Blade(new Random(seed));
    }
    eval {return function.map(v, new LVect2d());}
}
fn Blade_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Blade(new Random(seed));
    }
    eval {return function;}
}

fn Secant_f {
    // variation 46
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Secant();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Secant_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Secant();
    }
    eval {return function;}
}

fn Twintrain_f {
    // variation 47
    fout LVect2d;
    in LVect2d v;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Twintrain(new Random(seed));
    }
    eval {return function.map(v, new LVect2d());}
}
fn Twintrain_v {
    fout IFSUtil.Mapping_v2;

    parameter Integer seed;

    init {
        Random rand = new Random();
        seed = rand.nextInt();
    }

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Twintrain(new Random(seed));
    }
    eval {return function;}
}

fn Cross_f {
    // variation 48
    fout LVect2d;
    in LVect2d v;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Cross();
    }
    eval {return function.map(v, new LVect2d());}
}
fn Cross_v {
    fout IFSUtil.Mapping_v2;

    private IFSUtil.Mapping_v2 function;
    setup {
        function = new Cross();
    }
    eval {return function;}
}

