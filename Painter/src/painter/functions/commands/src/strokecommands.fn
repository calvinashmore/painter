package painter.functions.commands;
group StrokeCommands;
type Command;

import utils.linear.*;
import utils.curves.*;
import painter.tools.canvas.*;
import painter.tools.brush.*;
import painter.tools.stroke.*;


description "Stroke commands";


// *****************************************
// ****** BASIC STROKES
// *****************************************


fn SimpleStroke {
    in CurveUtil.Curve_v2 position;
    in Color color;
    in Brush brush;
    in Stroke stroke;
    in SegmentRenderer renderer;
    parameter LDouble width;

    init {
        width = new LDouble(Math.random()*.1);
    }

    exec {
        Canvas canvas = (Canvas) context.getVariable("canvas");
        stroke.render(brush, new ConstantCurve<LDouble>(width), position, new ConstantCurve<Color>(color), canvas, renderer);
    }
}

fn ColorStroke1 {
    in CurveUtil.Curve_v2 position;
    in CurveUtil.Curve_col color;
    in Brush brush;
    in Stroke stroke;
    in SegmentRenderer renderer;
    parameter LDouble width;

    init {
        width = new LDouble(Math.random()*.1);
    }

    exec {
        Canvas canvas = (Canvas) context.getVariable("canvas");
        stroke.render(brush, new ConstantCurve<LDouble>(width), position, color, canvas, renderer);
    }
}

fn ColorStroke2 {
    in CurveUtil.Curve_v2 position;
    in CurveUtil.Curve_col color;
    in LDouble width;
    in Brush brush;
    in Stroke stroke;
    in SegmentRenderer renderer;

    exec {
        Canvas canvas = (Canvas) context.getVariable("canvas");
        stroke.render(brush, new ConstantCurve<LDouble>(width), position, color, canvas, renderer);
    }
}

fn ColorSizeStroke {
    in CurveUtil.Curve_v2 position;
    in CurveUtil.Curve_col color;
    in CurveUtil.Curve_d width;
    in Brush brush;
    in Stroke stroke;
    in SegmentRenderer renderer;

    exec {
        Canvas canvas = (Canvas) context.getVariable("canvas");
        stroke.render(brush, width, position, color, canvas, renderer);
    }
}


// *****************************************
// ****** SPECIAL STROKES
// *****************************************

fn TwoCurveStroke1 {
    in CurveUtil.Curve_v2 position1;
    in CurveUtil.Curve_v2 position2;
    in CurveUtil.Curve_col color;
    in CurveUtil.Curve_d width;
    in Brush brush;
    in Stroke stroke;
    in SegmentRenderer renderer;

    description "draws strokes between two curves";

    parameter int middlePoints;

    init {
        middlePoints = (int)(20 + 50*Math.random());
    }

    exec {
        Canvas canvas = (Canvas) context.getVariable("canvas");

        for(int i=0;i<middlePoints;i++) {
            double x = (double)i/middlePoints;

            Curve<LVect2d> position = new SegmentCurve(position1.getValue(x), position2.getValue(x));
            stroke.render(brush, width, position, color, canvas, renderer);
        }
    }
}

fn TwoCurveStroke2 {
    in CurveUtil.Curve_v2 position1;
    in CurveUtil.Curve_v2 position2;
    in CurveUtil.Curve_col color;
    in CurveUtil.Curve_d width;
    in Brush brush;
    in Stroke stroke;
    in SegmentRenderer renderer;

    description "draws cuves between two strokes, but reverses them";

    parameter int middlePoints;

    init {
        middlePoints = (int)(20 + 50*Math.random());
    }

    exec {
        Canvas canvas = (Canvas) context.getVariable("canvas");

        for(int i=0;i<middlePoints;i++) {
            double x = (double)i/middlePoints;

            Curve<LVect2d> position = new SegmentCurve(position1.getValue(x), position2.getValue(1-x));
            stroke.render(brush, width, position, color, canvas, renderer);
        }
    }
}
