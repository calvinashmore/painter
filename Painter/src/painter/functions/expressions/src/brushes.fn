package painter.functions.expressions;
group Brushes;
type Expression;

import utils.linear.*;
import painter.tools.brush.*;

description "expressions to generate brushes";

fn simpleBrush1 {
    fout Brush;

    eval {
        return new SimpleBrush();
    }
}

fn simpleBrush2 {
    fout Brush;

    parameter LDouble radiusMultiplier;
    init {
        radiusMultiplier = new LDouble(.2*Math.random()*.5);
    }

    eval {
        return new SimpleBrush(radiusMultiplier.val);
    }
}

fn simpleBrush3 {
    fout Brush;
    in LDouble radiusMultiplier;

    eval {
        return new SimpleBrush(radiusMultiplier.val);
    }
}

fn hollowCircleBrush {
    fout Brush;

    eval {
        return new HollowCircleBrush();
    }
}

fn cyclingBrush {
    fout Brush;
    in Brush brush;

    eval {
        return new CyclingBrush(brush);
    }
}

fn penBrush {
    fout Brush;

    eval {
        return new PenBrush();
    }
}

fn sweepBrush1 {
    fout Brush;
    parameter int numberDots;
    parameter double dotSize;

    init {
        dotSize = .2+.8*Math.random();
        numberDots = (int)(3+5*Math.random());
    }

    eval {
        return new SweepBrush(numberDots, dotSize, new SimpleBrush());
    }
}

fn sweepBrush2 {
    fout Brush;
    parameter int numberDots;
    parameter double dotSize;

    in Brush brush;

    init {
        dotSize = .2+.8*Math.random();
        numberDots = (int)(3+5*Math.random());
    }

    eval {
        return new SweepBrush(numberDots, dotSize, brush);
    }
}

