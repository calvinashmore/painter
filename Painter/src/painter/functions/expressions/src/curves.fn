package painter.functions.expressions;
group Curves;
type Expression;

import utils.linear.*;
import painter.util.curves.*;

description "expressions to generate curves";


// *****************************************
// ****** SEGMENT CURVES
// *****************************************

fn segmentCurve_d {
    in LDouble x;
    in LDouble y;
    fout CurveUtil.Curve_d;

    eval {
        return new CurveUtil.Curve_d_wrap(new SegmentCurve(x,y));
    }
}

fn segmentCurve_v2 {
    in LVect2d x;
    in LVect2d y;
    fout CurveUtil.Curve_v2;

    eval {
        return new CurveUtil.Curve_v2_wrap(new SegmentCurve(x,y));
    }
}

fn segmentCurve_col {
    in Color x;
    in Color y;
    fout CurveUtil.Curve_col;

    eval {
        return new CurveUtil.Curve_col_wrap(new SegmentCurve(x,y));
    }
}

fn segmentCurve1_d {
    parameter LDouble x;
    parameter LDouble y;
    fout CurveUtil.Curve_d;

    init {
        x = new LDouble(2*Math.random()-1);
        y = new LDouble(2*Math.random()-1);
    }

    eval {
        return new CurveUtil.Curve_d_wrap(new SegmentCurve(x,y));
    }
}

fn segmentCurve1_v2 {
    parameter LVect2d x;
    parameter LVect2d y;
    fout CurveUtil.Curve_v2;

    init {
        x = new LVect2d(2*Math.random()-1, 2*Math.random()-1);
        y = new LVect2d(2*Math.random()-1, 2*Math.random()-1);
    }

    eval {
        return new CurveUtil.Curve_v2_wrap(new SegmentCurve(x,y));
    }
}

fn segmentCurve1_col {
    parameter Color x;
    parameter Color y;
    fout CurveUtil.Curve_col;

    init {
        x = new Color(Math.random(), Math.random(), Math.random());
        y = new Color(Math.random(), Math.random(), Math.random());
    }

    eval {
        return new CurveUtil.Curve_col_wrap(new SegmentCurve(x,y));
    }
}

// *****************************************
// ****** MISCELLANEOUS CURVES
// *****************************************

fn circleCurve_v2 {
    in LVect2d center;
    in LDouble radius;

    fout CurveUtil.Curve_v2;

    eval {
        return new CurveUtil.Curve_v2_wrap(new Circle(center, radius.val));
    }
}

fn circleCurve1_v2 {
    in LVect2d center;
    parameter LDouble radius;

    fout CurveUtil.Curve_v2;

    init {
        radius = new LDouble(Math.random()+.1);
    }

    eval {
        return new CurveUtil.Curve_v2_wrap(new Circle(center, radius.val));
    }
}

fn sinCurve_d {
    description "This is a sin curve from 0 to 2*pi";

    fout CurveUtil.Curve_d;

    eval {
        return new CurveUtil.Curve_d() {
            public LDouble getValue(double t) {
                return new LDouble(Math.sin(t*2*Math.PI));
            }
        };
    }
}

fn cosCurve_d {
    description "This is a cos curve from 0 to 2*pi";

    fout CurveUtil.Curve_d;

    eval {
        return new CurveUtil.Curve_d() {
            public LDouble getValue(double t) {
                return new LDouble(Math.cos(t*2*Math.PI));
            }
        };
    }
}


fn sinBumpCurve_d {
    description "This is a sin curve from 0 to pi, creating a bump";

    fout CurveUtil.Curve_d;

    eval {
        return new CurveUtil.Curve_d() {
            public LDouble getValue(double t) {
                return new LDouble(Math.sin(t*Math.PI));
            }
        };
    }
}


fn cosBumpCurve_d {
    description "This is a cos curve from -pi to pi, creating a tapered bump, and scaled so its range is in 1/0";

    fout CurveUtil.Curve_d;

    eval {
        return new CurveUtil.Curve_d() {
            public LDouble getValue(double t) {
                return new LDouble(.5+.5*Math.cos(-Math.PI + t*Math.PI));
            }
        };
    }
}

// *****************************************
// ****** SPIRALS
// *****************************************

fn spiralArchimedean {
    description "Archimedean spiral";
    fout CurveUtil.Curve_v2;

    parameter double a;
    parameter double b;

    init {
        a = .8+.4*Math.random();
        b = 2 + 2*Math.random();
    }

    eval {
        return new CurveUtil.Curve_v2_wrap(new ArchimedeanSpiral(a,b));
    }
}

fn spiralFermat {
    description "Fermat spiral";
    fout CurveUtil.Curve_v2;

    parameter double a;
    parameter double b;

    init {
        a = .8+.4*Math.random();
        b = 2 + 2*Math.random();
    }

    eval {
        return new CurveUtil.Curve_v2_wrap(new FermatSpiral(a,b));
    }
}

fn spiralLogarithmic {
    description "Logarithmic spiral";
    fout CurveUtil.Curve_v2;

    parameter double a;
    parameter double b;
    parameter double c;

    init {
        a = .8+.4*Math.random();
        b = .8+.4*Math.random();
        c = 2 + 2*Math.random();
    }

    eval {
        return new CurveUtil.Curve_v2_wrap(new LogarithmicSpiral(a,b,c));
    }
}

// *****************************************
// ****** ALGEBRA
// *****************************************

fn add_d {
    fout CurveUtil.Curve_d;
    in CurveUtil.Curve_d x;
    in CurveUtil.Curve_d y;

    eval {
        return new CurveUtil.Curve_d_wrap(CurveUtil.add(x,y));
    }
}

fn sub_d {
    fout CurveUtil.Curve_d;
    in CurveUtil.Curve_d x;
    in CurveUtil.Curve_d y;

    eval {
        return new CurveUtil.Curve_d_wrap(CurveUtil.sub(x,y));
    }
}

fn mult_d {
    fout CurveUtil.Curve_d;
    in CurveUtil.Curve_d x;
    in LDouble c;

    eval {
        return new CurveUtil.Curve_d_wrap(CurveUtil.mult(x,c.val));
    }
}


fn add_v2 {
    fout CurveUtil.Curve_v2;
    in CurveUtil.Curve_v2 x;
    in CurveUtil.Curve_v2 y;

    eval {
        return new CurveUtil.Curve_v2_wrap(CurveUtil.add(x,y));
    }
}

fn sub_v2 {
    fout CurveUtil.Curve_v2;
    in CurveUtil.Curve_v2 x;
    in CurveUtil.Curve_v2 y;

    eval {
        return new CurveUtil.Curve_v2_wrap(CurveUtil.sub(x,y));
    }
}

fn mult_v2 {
    fout CurveUtil.Curve_v2;
    in CurveUtil.Curve_v2 x;
    in LDouble c;

    eval {
        return new CurveUtil.Curve_v2_wrap(CurveUtil.mult(x,c.val));
    }
}


fn add_col {
    fout CurveUtil.Curve_col;
    in CurveUtil.Curve_col x;
    in CurveUtil.Curve_col y;

    eval {
        return new CurveUtil.Curve_col_wrap(CurveUtil.add(x,y));
    }
}

fn sub_col {
    fout CurveUtil.Curve_col;
    in CurveUtil.Curve_col x;
    in CurveUtil.Curve_col y;

    eval {
        return new CurveUtil.Curve_col_wrap(CurveUtil.sub(x,y));
    }
}

fn mult_col {
    fout CurveUtil.Curve_col;
    in CurveUtil.Curve_col x;
    in LDouble c;

    eval {
        return new CurveUtil.Curve_col_wrap(CurveUtil.mult(x,c.val));
    }
}

