package painter.functions.expressions;
group ImageOps;
type Expression;

import java.awt.image.*;
import utils.linear.*;
import painter.tools.brush.*;
import painter.tools.misc.*;
import painter.tools.canvas.*;

description "expressions for image operations";


// *********************
// **** BLURS
// *********************

fn BoxBlur {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/9;
        float[] matrix = new float[] {
            v, v, v,
            v, v, v,
            v, v, v
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn CrossBlur {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/5;
        float[] matrix = new float[] {
            0, v, 0,
            v, v, v,
            0, v, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn XBlur {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/5;
        float[] matrix = new float[] {
            v, 0, v,
            0, v, 0,
            v, 0, v
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn VBlur {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            0, v, 0,
            0, v, 0,
            0, v, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn HBlur {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            0, 0, 0,
            v, v, v,
            0, 0, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

// *********************
// **** SHARPENS
// *********************

fn CrossSharpen {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/5;
        float[] matrix = new float[] {
            0, -v, 0,
            -v, 1+4*v, -v,
            0, -v, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn BoxSharpen1 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/5;
        float[] matrix = new float[] {
            -v, -v, -v,
            -v, 1+9*v, -v,
            -v, -v, -v
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn BoxSharpen2 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/5;
        float[] matrix = new float[] {
            -.5f*v, -v, -0.5f*v,
            -v, 1+6*v, -v,
            -0.5f*v, -v, -0.5f*v
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

// *********************
// **** FIND EDGES
// *********************

fn FindEdgesV1 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            0, 0, 0,
            -v, 1+2*v, -v,
            0, 0, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn FindEdgesV2 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            0, v, 0,
            -v, 1, -v,
            0, v, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn FindEdgesH1 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            0, -v, 0,
            0, 1+2*v, 0,
            0, -v, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn FindEdgesH2 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            0, -v, 0,
            v, 1, v,
            0, -v, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn FindEdgesZig1 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            -v, 0, 0,
            0, 1+2*v, 0,
            0, 0, -v
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn FindEdgesZig2 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            -v, 0, v,
            0, 1, 0,
            v, 0, -v
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn FindEdgesZag1 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            0, 0, -v,
            0, 1+2*v, 0,
            -v, 0, 0
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn FindEdgesZag2 {
    fout BufferedImageOp;
    eval {
        float v = 1.0f/3;
        float[] matrix = new float[] {
            v, 0, -v,
            0, 1, 0,
            -v, 0, v
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}


// *********************
// **** INPUT BASED CONVOLUTIONS
// *********************

fn Blurry1 {
    fout BufferedImageOp;
    description "this takes 9 inputs for the convolution, uses their absolute values, averages them so the output weight is 1, and uses the result";
    in LDouble v00;
    in LDouble v01;
    in LDouble v02;
    in LDouble v10;
    in LDouble v11;
    in LDouble v12;
    in LDouble v20;
    in LDouble v21;
    in LDouble v22;
    eval {
        float m00 = (float) Math.abs(v00.val);
        float m01 = (float) Math.abs(v01.val);
        float m02 = (float) Math.abs(v02.val);
        float m10 = (float) Math.abs(v10.val);
        float m11 = (float) Math.abs(v11.val);
        float m12 = (float) Math.abs(v12.val);
        float m20 = (float) Math.abs(v20.val);
        float m21 = (float) Math.abs(v21.val);
        float m22 = (float) Math.abs(v22.val);

        float sum = m00 + m01 + m02 + m10 + m11 + m12 + m20 + m21 + m22;
        
        float[] matrix = new float[] {
            m00/sum, m01/sum, m02/sum,
            m10/sum, m11/sum, m12/sum,
            m20/sum, m21/sum, m22/sum,
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn Blurry2 {
    fout BufferedImageOp;
    description "this takes 3 LVect3d inputs for the convolution, uses their absolute values, averages them so the output weight is 1, and uses the result";
    in LVect3d v1;
    in LVect3d v2;
    in LVect3d v3;
    eval {
        float m00 = (float) Math.abs(v1.x);
        float m01 = (float) Math.abs(v1.y);
        float m02 = (float) Math.abs(v1.z);
        float m10 = (float) Math.abs(v2.x);
        float m11 = (float) Math.abs(v2.y);
        float m12 = (float) Math.abs(v2.z);
        float m20 = (float) Math.abs(v3.x);
        float m21 = (float) Math.abs(v3.y);
        float m22 = (float) Math.abs(v3.z);

        float sum = m00 + m01 + m02 + m10 + m11 + m12 + m20 + m21 + m22;

        float[] matrix = new float[] {
            m00/sum, m01/sum, m02/sum,
            m10/sum, m11/sum, m12/sum,
            m20/sum, m21/sum, m22/sum,
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}


fn Sharpy1 {
    fout BufferedImageOp;
    description "This takes 9 inputs and uses the average of their sum without taking the absolute value";
    in LDouble v00;
    in LDouble v01;
    in LDouble v02;
    in LDouble v10;
    in LDouble v11;
    in LDouble v12;
    in LDouble v20;
    in LDouble v21;
    in LDouble v22;
    eval {
        float m00 = (float) v00.val;
        float m01 = (float) v01.val;
        float m02 = (float) v02.val;
        float m10 = (float) v10.val;
        float m11 = (float) v11.val;
        float m12 = (float) v12.val;
        float m20 = (float) v20.val;
        float m21 = (float) v21.val;
        float m22 = (float) v22.val;

        float sum = m00 + m01 + m02 + m10 + m11 + m12 + m20 + m21 + m22;

        float[] matrix = new float[] {
            m00/sum, m01/sum, m02/sum,
            m10/sum, m11/sum, m12/sum,
            m20/sum, m21/sum, m22/sum,
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}

fn Sharpy2 {
    fout BufferedImageOp;
    description "this takes 3 LVect3d inputs and uses the average of their sum without taking the absolute value";
    in LVect3d v1;
    in LVect3d v2;
    in LVect3d v3;
    eval {
        float m00 = (float) v1.x;
        float m01 = (float) v1.y;
        float m02 = (float) v1.z;
        float m10 = (float) v2.x;
        float m11 = (float) v2.y;
        float m12 = (float) v2.z;
        float m20 = (float) v3.x;
        float m21 = (float) v3.y;
        float m22 = (float) v3.z;

        float sum = m00 + m01 + m02 + m10 + m11 + m12 + m20 + m21 + m22;

        float[] matrix = new float[] {
            m00/sum, m01/sum, m02/sum,
            m10/sum, m11/sum, m12/sum,
            m20/sum, m21/sum, m22/sum,
        };
        Kernel kernel = new Kernel(3,3, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        return op;
    }
}


// *********************
// **** TRANSFORMS
// *********************

fn TransformHueOffset1 {

    parameter LDouble hueOffset;
    fout BufferedImageOp;

    init {
        hueOffset = new LDouble(Math.random());
    }

    eval {
        LookupTable lookupTable = new ColorTransformer() {
            public void transformPixel(int[] src, int[] dst) {
                double[] hsbvals = toHSB(src);

                hsbvals[0] += hueOffset.val;
                toRGB(hsbvals, dst);
            }
        }.createLookup();

        return new LookupOp(lookupTable, null);
    }
}

fn TransformHueOffset2 {

    in LDouble hueOffset;
    fout BufferedImageOp;

    eval {
        LookupTable lookupTable = new ColorTransformer() {
            public void transformPixel(int[] src, int[] dst) {
                double[] hsbvals = toHSB(src);

                hsbvals[0] += hueOffset.val;
                toRGB(hsbvals, dst);
            }
        }.createLookup();

        return new LookupOp(lookupTable, null);
    }
}

fn TransformSetHue1 {

    parameter LDouble hueSet;
    fout BufferedImageOp;

    init {
        hueSet = new LDouble(Math.random());
    }

    eval {
        LookupTable lookupTable = new ColorTransformer() {
            public void transformPixel(int[] src, int[] dst) {
                double[] hsbvals = toHSB(src);

                hsbvals[0] = hueSet.val;
                toRGB(hsbvals, dst);
            }
        }.createLookup();

        return new LookupOp(lookupTable, null);
    }
}

fn TransformSetHue2 {

    in LDouble hueSet;
    fout BufferedImageOp;

    eval {
        LookupTable lookupTable = new ColorTransformer() {
            public void transformPixel(int[] src, int[] dst) {
                double[] hsbvals = toHSB(src);

                hsbvals[0] = hueSet.val;
                toRGB(hsbvals, dst);
            }
        }.createLookup();

        return new LookupOp(lookupTable, null);
    }
}

fn TransformSetSaturation1 {

    parameter LDouble satSet;
    fout BufferedImageOp;

    init {
        satSet = new LDouble(Math.random());
    }

    eval {
        LookupTable lookupTable = new ColorTransformer() {
            public void transformPixel(int[] src, int[] dst) {
                double[] hsbvals = toHSB(src);

                hsbvals[0] = satSet.val;
                toRGB(hsbvals, dst);
            }
        }.createLookup();

        return new LookupOp(lookupTable, null);
    }
}

fn TransformSetSaturation2 {

    in LDouble satSet;
    fout BufferedImageOp;

    eval {
        LookupTable lookupTable = new ColorTransformer() {
            public void transformPixel(int[] src, int[] dst) {
                double[] hsbvals = toHSB(src);

                hsbvals[0] = satSet.val;
                toRGB(hsbvals, dst);
            }
        }.createLookup();

        return new LookupOp(lookupTable, null);
    }
}



