
group Algebraic;

// alegebraic functions

// ************
// *** AVERAGES
// ************

fn avg_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble((x.val+y.val)/2);
    }

    estimate {
        return new Estimate_d(
                (x.getMinimum() + y.getMinimum())/2, (x.getMaximum() + y.getMaximum())/2
                );
    }
}

fn avg_c {
    in Complex x;
    in Complex y;
    fout Complex;

    eval {
        return new Complex(x.x+y.x, x.y+y.y);
    }

    estimate {
        return new Estimate_c(
                (x.getXMinimum() + y.getXMinimum())/2, (x.getXMaximum() + y.getXMaximum())/2, 
                (x.getYMinimum() + y.getYMinimum())/2, (x.getYMaximum() + y.getYMaximum())/2
                );
    }
}

fn avg_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x+y.x, x.y+y.y);
    }

    estimate {
        return new Estimate_v2(
                (x.getXMinimum() + y.getXMinimum())/2, (x.getXMaximum() + y.getXMaximum())/2, 
                (x.getYMinimum() + y.getYMinimum())/2, (x.getYMaximum() + y.getYMaximum())/2
                );
    }
}

fn avg_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d((x.x+y.x)/2, (x.y+y.y)/2, (x.z+y.z)/2);
    }

    estimate {
        return new Estimate_v3(
                (x.getXMinimum() + y.getXMinimum())/2, (x.getXMaximum() + y.getXMaximum())/2, 
                (x.getYMinimum() + y.getYMinimum())/2, (x.getYMaximum() + y.getYMaximum())/2,
                (x.getZMinimum() + y.getZMinimum())/2, (x.getZMaximum() + y.getZMaximum())/2
                );
    }
}

// ************
// *** ADDITION
// ************

fn add_col {
    in Color x;
    in Color y;
    fout Color;

    eval {
        return new Color(x.r+y.r, x.g+y.g, x.b+y.b);
    }

    estimate {
        return new Estimate_col(
                x.getRMinimum() + y.getRMinimum(), x.getRMaximum() + y.getRMaximum(), 
                x.getGMinimum() + y.getGMinimum(), x.getGMaximum() + y.getGMaximum(), 
                x.getBMinimum() + y.getBMinimum(), x.getBMaximum() + y.getBMaximum()
                );
    }
}

fn add_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble(x.val+y.val);
    }

    estimate {
        return new Estimate_d(
                x.getMinimum() + y.getMinimum(), x.getMaximum() + y.getMaximum()
                );
    }
}

fn add_c {
    in Complex x;
    in Complex y;
    fout Complex;

    eval {
        return new Complex(x.x+y.x, x.y+y.y);
    }

    estimate {
        return new Estimate_c(
                x.getXMinimum() + y.getXMinimum(), x.getXMaximum() + y.getXMaximum(), 
                x.getYMinimum() + y.getYMinimum(), x.getYMaximum() + y.getYMaximum()
                );
    }
}

fn add_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x+y.x, x.y+y.y);
    }

    estimate {
        return new Estimate_v2(
                x.getXMinimum() + y.getXMinimum(), x.getXMaximum() + y.getXMaximum(), 
                x.getYMinimum() + y.getYMinimum(), x.getYMaximum() + y.getYMaximum()
                );
    }
}

fn add_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d(x.x+y.x, x.y+y.y, x.z+y.z);
    }

    estimate {
        return new Estimate_v3(
                x.getXMinimum() + y.getXMinimum(), x.getXMaximum() + y.getXMaximum(), 
                x.getYMinimum() + y.getYMinimum(), x.getYMaximum() + y.getYMaximum(),
                x.getZMinimum() + y.getZMinimum(), x.getZMaximum() + y.getZMaximum()
                );
    }
}

// ***************
// *** SUBTRACTION
// ***************

fn sub_col {
    in Color x;
    in Color y;
    fout Color;

    eval {
        return new Color(x.r-y.r, x.g-y.g, x.b-y.b);
    }

    estimate {
        double ax = x.getRMaximum() - y.getRMaximum();
        double bx = x.getRMaximum() - y.getRMinimum();
        double cx = x.getRMinimum() - y.getRMaximum();
        double dx = x.getRMinimum() - y.getRMinimum();
        double ay = x.getGMaximum() - y.getGMaximum();
        double by = x.getGMaximum() - y.getGMinimum();
        double cy = x.getGMinimum() - y.getGMaximum();
        double dy = x.getGMinimum() - y.getGMinimum();
        double az = x.getBMaximum() - y.getBMaximum();
        double bz = x.getBMaximum() - y.getBMinimum();
        double cz = x.getBMinimum() - y.getBMaximum();
        double dz = x.getBMinimum() - y.getBMinimum();
        
        return new Estimate_col(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

fn sub_c {
    in Complex x;
    in Complex y;
    fout Complex;

    eval {
        return new Complex(x.x-y.x, x.y-y.y);
    }

    estimate {
        double ax = x.getXMaximum() - y.getXMaximum();
        double bx = x.getXMaximum() - y.getXMinimum();
        double cx = x.getXMinimum() - y.getXMaximum();
        double dx = x.getXMinimum() - y.getXMinimum();
        double ay = x.getYMaximum() - y.getYMaximum();
        double by = x.getYMaximum() - y.getYMinimum();
        double cy = x.getYMinimum() - y.getYMaximum();
        double dy = x.getYMinimum() - y.getYMinimum();
        
        return new Estimate_c(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) )
                );
    }
}

fn sub_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble(x.val-y.val);
    }

    estimate {
        double ax = x.getMaximum() - y.getMaximum();
        double bx = x.getMaximum() - y.getMinimum();
        double cx = x.getMinimum() - y.getMaximum();
        double dx = x.getMinimum() - y.getMinimum();
        
        return new Estimate_d(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) )
                );
    }
}

fn sub_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x-y.x, x.y-y.y);
    }

    estimate {
        double ax = x.getXMaximum() - y.getXMaximum();
        double bx = x.getXMaximum() - y.getXMinimum();
        double cx = x.getXMinimum() - y.getXMaximum();
        double dx = x.getXMinimum() - y.getXMinimum();
        double ay = x.getYMaximum() - y.getYMaximum();
        double by = x.getYMaximum() - y.getYMinimum();
        double cy = x.getYMinimum() - y.getYMaximum();
        double dy = x.getYMinimum() - y.getYMinimum();
        
        return new Estimate_v2(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) )
                );
    }
}

fn sub_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d(x.x-y.x, x.y-y.y, x.z-y.z);
    }

    estimate {
        double ax = x.getXMaximum() - y.getXMaximum();
        double bx = x.getXMaximum() - y.getXMinimum();
        double cx = x.getXMinimum() - y.getXMaximum();
        double dx = x.getXMinimum() - y.getXMinimum();
        double ay = x.getYMaximum() - y.getYMaximum();
        double by = x.getYMaximum() - y.getYMinimum();
        double cy = x.getYMinimum() - y.getYMaximum();
        double dy = x.getYMinimum() - y.getYMinimum();
        double az = x.getZMaximum() - y.getZMaximum();
        double bz = x.getZMaximum() - y.getZMinimum();
        double cz = x.getZMinimum() - y.getZMaximum();
        double dz = x.getZMinimum() - y.getZMinimum();
        
        return new Estimate_v3(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

// *******************
// *** MULITIPLICATION
// *******************

fn mult_col {
    in Color x;
    in LDouble y;
    fout Color;

    eval {
        return new Color(x.r*y.val, x.g*y.val, x.b*y.val);
    }

    estimate {
        double ax = x.getRMaximum() * y.getMaximum();
        double bx = x.getRMaximum() * y.getMinimum();
        double cx = x.getRMinimum() * y.getMaximum();
        double dx = x.getRMinimum() * y.getMinimum();
        double ay = x.getGMaximum() * y.getMaximum();
        double by = x.getGMaximum() * y.getMinimum();
        double cy = x.getGMinimum() * y.getMaximum();
        double dy = x.getGMinimum() * y.getMinimum();
        double az = x.getBMaximum() * y.getMaximum();
        double bz = x.getBMaximum() * y.getMinimum();
        double cz = x.getBMinimum() * y.getMaximum();
        double dz = x.getBMinimum() * y.getMinimum();
        
        return new Estimate_col(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

fn mult_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble(x.val*y.val);
    }

    estimate {
        double a = x.getMaximum() * y.getMaximum();
        double b = x.getMaximum() * y.getMinimum();
        double c = x.getMinimum() * y.getMaximum();
        double d = x.getMinimum() * y.getMinimum();
        
        return new Estimate_d(
                Math.min( Math.min(a,b) , Math.min(c,d) ),
                Math.max( Math.max(a,b) , Math.max(c,d) )
                );
    }
}

fn mult_c {
    in Complex x;
    in LDouble y;
    fout Complex;

    eval {
        return new Complex(x.x*y.val, x.y*y.val);
    }

    estimate {
        double ax = x.getXMaximum() * y.getMaximum();
        double bx = x.getXMaximum() * y.getMinimum();
        double cx = x.getXMinimum() * y.getMaximum();
        double dx = x.getXMinimum() * y.getMinimum();
        double ay = x.getYMaximum() * y.getMaximum();
        double by = x.getYMaximum() * y.getMinimum();
        double cy = x.getYMinimum() * y.getMaximum();
        double dy = x.getYMinimum() * y.getMinimum();
        
        return new Estimate_c(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) )
                );
    }
}

fn mult_c_c {
    in Complex x;
    in Complex y;
    fout Complex;

    eval {
        return new Complex(x.x*y.x, x.y*y.y);
    }

    estimate {
        double ax = x.getXMaximum() * y.getXMaximum();
        double bx = x.getXMaximum() * y.getXMinimum();
        double cx = x.getXMinimum() * y.getXMaximum();
        double dx = x.getXMinimum() * y.getXMinimum();
        double ay = x.getYMaximum() * y.getYMaximum();
        double by = x.getYMaximum() * y.getYMinimum();
        double cy = x.getYMinimum() * y.getYMaximum();
        double dy = x.getYMinimum() * y.getYMinimum();
        
        return new Estimate_c(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) )
                );
    }
}

fn mult_v2 {
    in LVect2d x;
    in LDouble y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x*y.val, x.y*y.val);
    }

    estimate {
        double ax = x.getXMaximum() * y.getMaximum();
        double bx = x.getXMaximum() * y.getMinimum();
        double cx = x.getXMinimum() * y.getMaximum();
        double dx = x.getXMinimum() * y.getMinimum();
        double ay = x.getYMaximum() * y.getMaximum();
        double by = x.getYMaximum() * y.getMinimum();
        double cy = x.getYMinimum() * y.getMaximum();
        double dy = x.getYMinimum() * y.getMinimum();
        
        return new Estimate_v2(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) )
                );
    }
}

fn mult_v2_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(x.x*y.x, x.y*y.y);
    }

    estimate {
        double ax = x.getXMaximum() * y.getXMaximum();
        double bx = x.getXMaximum() * y.getXMinimum();
        double cx = x.getXMinimum() * y.getXMaximum();
        double dx = x.getXMinimum() * y.getXMinimum();
        double ay = x.getYMaximum() * y.getYMaximum();
        double by = x.getYMaximum() * y.getYMinimum();
        double cy = x.getYMinimum() * y.getYMaximum();
        double dy = x.getYMinimum() * y.getYMinimum();
        
        return new Estimate_v2(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) )
                );
    }
}

fn mult_v3 {
    in LVect3d x;
    in LDouble y;
    fout LVect3d;

    eval {
        return new LVect3d(x.x*y.val, x.y*y.val, x.z*y.val);
    }

    estimate {
        double ax = x.getXMaximum() * y.getMaximum();
        double bx = x.getXMaximum() * y.getMinimum();
        double cx = x.getXMinimum() * y.getMaximum();
        double dx = x.getXMinimum() * y.getMinimum();
        double ay = x.getYMaximum() * y.getMaximum();
        double by = x.getYMaximum() * y.getMinimum();
        double cy = x.getYMinimum() * y.getMaximum();
        double dy = x.getYMinimum() * y.getMinimum();
        double az = x.getZMaximum() * y.getMaximum();
        double bz = x.getZMaximum() * y.getMinimum();
        double cz = x.getZMinimum() * y.getMaximum();
        double dz = x.getZMinimum() * y.getMinimum();
        
        return new Estimate_v3(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

fn mult_v3_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d(x.x*y.x, x.y*y.y, x.z*y.z);
    }

    estimate {
        double ax = x.getXMaximum() * y.getXMaximum();
        double bx = x.getXMaximum() * y.getXMinimum();
        double cx = x.getXMinimum() * y.getXMaximum();
        double dx = x.getXMinimum() * y.getXMinimum();
        double ay = x.getYMaximum() * y.getYMaximum();
        double by = x.getYMaximum() * y.getYMinimum();
        double cy = x.getYMinimum() * y.getYMaximum();
        double dy = x.getYMinimum() * y.getYMinimum();
        double az = x.getZMaximum() * y.getZMaximum();
        double bz = x.getZMaximum() * y.getZMinimum();
        double cz = x.getZMinimum() * y.getZMaximum();
        double dz = x.getZMinimum() * y.getZMinimum();
        
        return new Estimate_v3(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

// *******************
// *** MULITIPLICATION
// *******************

fn pow_col {
    in Color x;
    in LDouble y;
    fout Color;

    eval {
        return new Color(Math.pow(x.r,y.val), Math.pow(x.g,y.val), Math.pow(x.b,y.val));
    }

    estimate {
        double ax = Math.pow(x.getRMaximum() , y.getMaximum());
        double bx = Math.pow(x.getRMaximum() , y.getMinimum());
        double cx = Math.pow(x.getRMinimum() , y.getMaximum());
        double dx = Math.pow(x.getRMinimum() , y.getMinimum());
        double ay = Math.pow(x.getGMaximum() , y.getMaximum());
        double by = Math.pow(x.getGMaximum() , y.getMinimum());
        double cy = Math.pow(x.getGMinimum() , y.getMaximum());
        double dy = Math.pow(x.getGMinimum() , y.getMinimum());
        double az = Math.pow(x.getBMaximum() , y.getMaximum());
        double bz = Math.pow(x.getBMaximum() , y.getMinimum());
        double cz = Math.pow(x.getBMinimum() , y.getMaximum());
        double dz = Math.pow(x.getBMinimum() , y.getMinimum());
        
        return new Estimate_col(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

fn pow_col_col {
    in Color x;
    in Color y;
    fout Color;

    eval {
        return new Color(Math.pow(x.r,y.r), Math.pow(x.g,y.g), Math.pow(x.b,y.b));
    }

    estimate {
        double ax = Math.pow(x.getRMaximum() , y.getRMaximum());
        double bx = Math.pow(x.getRMaximum() , y.getRMinimum());
        double cx = Math.pow(x.getRMinimum() , y.getRMaximum());
        double dx = Math.pow(x.getRMinimum() , y.getRMinimum());
        double ay = Math.pow(x.getGMaximum() , y.getGMaximum());
        double by = Math.pow(x.getGMaximum() , y.getGMinimum());
        double cy = Math.pow(x.getGMinimum() , y.getGMaximum());
        double dy = Math.pow(x.getGMinimum() , y.getGMinimum());
        double az = Math.pow(x.getBMaximum() , y.getBMaximum());
        double bz = Math.pow(x.getBMaximum() , y.getBMinimum());
        double cz = Math.pow(x.getBMinimum() , y.getBMaximum());
        double dz = Math.pow(x.getBMinimum() , y.getBMinimum());
        
        return new Estimate_col(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

fn pow_d {
    in LDouble x;
    in LDouble y;
    fout LDouble;

    eval {
        return new LDouble(Math.pow(x.val,y.val));
    }

    estimate {
        double a = Math.pow(x.getMaximum() , y.getMaximum());
        double b = Math.pow(x.getMaximum() , y.getMinimum());
        double c = Math.pow(x.getMinimum() , y.getMaximum());
        double d = Math.pow(x.getMinimum() , y.getMinimum());
        
        return new Estimate_d(
                Math.min( Math.min(a,b) , Math.min(c,d) ),
                Math.max( Math.max(a,b) , Math.max(c,d) )
                );
    }
}

fn pow_v2 {
    in LVect2d x;
    in LDouble y;
    fout LVect2d;

    eval {
        return new LVect2d(Math.pow(x.x,y.val), Math.pow(x.y,y.val));
    }

    estimate {
        double ax = Math.pow(x.getXMaximum() , y.getMaximum());
        double bx = Math.pow(x.getXMaximum() , y.getMinimum());
        double cx = Math.pow(x.getXMinimum() , y.getMaximum());
        double dx = Math.pow(x.getXMinimum() , y.getMinimum());
        double ay = Math.pow(x.getYMaximum() , y.getMaximum());
        double by = Math.pow(x.getYMaximum() , y.getMinimum());
        double cy = Math.pow(x.getYMinimum() , y.getMaximum());
        double dy = Math.pow(x.getYMinimum() , y.getMinimum());
        
        return new Estimate_v2(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) )
                );
    }
}

fn pow_v2_v2 {
    in LVect2d x;
    in LVect2d y;
    fout LVect2d;

    eval {
        return new LVect2d(Math.pow(x.x,y.x), Math.pow(x.y,y.y));
    }

    estimate {
        double ax = Math.pow(x.getXMaximum() , y.getXMaximum());
        double bx = Math.pow(x.getXMaximum() , y.getXMinimum());
        double cx = Math.pow(x.getXMinimum() , y.getXMaximum());
        double dx = Math.pow(x.getXMinimum() , y.getXMinimum());
        double ay = Math.pow(x.getYMaximum() , y.getYMaximum());
        double by = Math.pow(x.getYMaximum() , y.getYMinimum());
        double cy = Math.pow(x.getYMinimum() , y.getYMaximum());
        double dy = Math.pow(x.getYMinimum() , y.getYMinimum());
        
        return new Estimate_v2(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) )
                );
    }
}

fn pow_v3 {
    in LVect3d x;
    in LDouble y;
    fout LVect3d;

    eval {
        return new LVect3d(Math.pow(x.x,y.val), Math.pow(x.y,y.val), Math.pow(x.z,y.val));
    }

    estimate {
        double ax = Math.pow(x.getXMaximum() , y.getMaximum());
        double bx = Math.pow(x.getXMaximum() , y.getMinimum());
        double cx = Math.pow(x.getXMinimum() , y.getMaximum());
        double dx = Math.pow(x.getXMinimum() , y.getMinimum());
        double ay = Math.pow(x.getYMaximum() , y.getMaximum());
        double by = Math.pow(x.getYMaximum() , y.getMinimum());
        double cy = Math.pow(x.getYMinimum() , y.getMaximum());
        double dy = Math.pow(x.getYMinimum() , y.getMinimum());
        double az = Math.pow(x.getZMaximum() , y.getMaximum());
        double bz = Math.pow(x.getZMaximum() , y.getMinimum());
        double cz = Math.pow(x.getZMinimum() , y.getMaximum());
        double dz = Math.pow(x.getZMinimum() , y.getMinimum());
        
        return new Estimate_v3(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

fn pow_v3_v3 {
    in LVect3d x;
    in LVect3d y;
    fout LVect3d;

    eval {
        return new LVect3d(Math.pow(x.x,y.x), Math.pow(x.y,y.y), Math.pow(x.z,y.z));
    }

    estimate {
        double ax = Math.pow(x.getXMaximum() , y.getXMaximum());
        double bx = Math.pow(x.getXMaximum() , y.getXMinimum());
        double cx = Math.pow(x.getXMinimum() , y.getXMaximum());
        double dx = Math.pow(x.getXMinimum() , y.getXMinimum());
        double ay = Math.pow(x.getYMaximum() , y.getYMaximum());
        double by = Math.pow(x.getYMaximum() , y.getYMinimum());
        double cy = Math.pow(x.getYMinimum() , y.getYMaximum());
        double dy = Math.pow(x.getYMinimum() , y.getYMinimum());
        double az = Math.pow(x.getZMaximum() , y.getZMaximum());
        double bz = Math.pow(x.getZMaximum() , y.getZMinimum());
        double cz = Math.pow(x.getZMinimum() , y.getZMaximum());
        double dz = Math.pow(x.getZMinimum() , y.getZMinimum());
        
        return new Estimate_v3(
                Math.min( Math.min(ax,bx) , Math.min(cx,dx) ),
                Math.max( Math.max(ax,bx) , Math.max(cx,dx) ),
                
                Math.min( Math.min(ay,by) , Math.min(cy,dy) ),
                Math.max( Math.max(ay,by) , Math.max(cy,dy) ),
                
                Math.min( Math.min(az,bz) , Math.min(cz,dz) ),
                Math.max( Math.max(az,bz) , Math.max(cz,dz) )
                );
    }
}

// **********
// *** OFFSET
// **********

fn offset_col {
    in Color x;
    fout Color;
    
    parameter Color offset;

    init {
        offset = new Color();
        offset.r = 2*Math.random()-1;
        offset.g = 2*Math.random()-1;
        offset.b = 2*Math.random()-1;
    }

    eval {
        return offset.add(x);
    }

    estimate {
        return new Estimate_col(
            x.getRMinimum()+offset.r, x.getRMaximum()+offset.r, 
            x.getGMinimum()+offset.g, x.getGMaximum()+offset.g, 
            x.getBMinimum()+offset.b, x.getBMaximum()+offset.b
            );
    }
}

fn offset_d {
    in LDouble x;
    fout LDouble;
    
    parameter double offset;

    init {
        offset = 2*Math.random()-1;
    }

    eval {
        return new LDouble(x.val+offset);
    }

    estimate {
        return new Estimate_d(
            x.getMinimum()+offset, x.getMaximum()+offset
            );
    }
}

fn offset_c {
    in Complex x;
    fout Complex;
    
    parameter Complex offset;

    init {
        offset = new Complex();
        offset.x = 2*Math.random()-1;
        offset.y = 2*Math.random()-1;
    }

    eval {
        return offset.add(x);
    }

    estimate {
        return new Estimate_c(
            x.getXMinimum()+offset.x, x.getXMaximum()+offset.x, 
            x.getYMinimum()+offset.y, x.getYMaximum()+offset.y
            );
    }
}

fn offset_v2 {
    in LVect2d x;
    fout LVect2d;
    
    parameter LVect2d offset;

    init {
        offset = new LVect2d();
        offset.x = 2*Math.random()-1;
        offset.y = 2*Math.random()-1;
    }

    eval {
        return offset.add(x);
    }

    estimate {
        return new Estimate_v2(
            x.getXMinimum()+offset.x, x.getXMaximum()+offset.x, 
            x.getYMinimum()+offset.y, x.getYMaximum()+offset.y
            );
    }
}

fn offset_v3 {
    in LVect3d x;
    fout LVect3d;
    
    parameter LVect3d offset;

    init {
        offset = new LVect3d();
        offset.x = 2*Math.random()-1;
        offset.y = 2*Math.random()-1;
        offset.z = 2*Math.random()-1;
    }

    eval {
        return offset.add(x);
    }

    estimate {
        return new Estimate_v3(
            x.getXMinimum()+offset.x, x.getXMaximum()+offset.x, 
            x.getYMinimum()+offset.y, x.getYMaximum()+offset.y,
            x.getZMinimum()+offset.z, x.getZMaximum()+offset.z
            );
    }
}

// *********
// *** SCALE
// *********

fn scale_d {
    in LDouble x;
    fout LDouble;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }

    estimate {
        return new Estimate_d(x.getMinimum()*scale, x.getMaximum()*scale);
    }
}

fn scale_c {
    in Complex x;
    fout Complex;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }

    estimate {
        return new Estimate_c(
            x.getXMinimum()*scale, x.getXMaximum()*scale,
            x.getYMinimum()*scale, x.getYMaximum()*scale
            );
    }
}

fn scale_v2 {
    in LVect2d x;
    fout LVect2d;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }

    estimate {
        return new Estimate_v2(
            x.getXMinimum()*scale, x.getXMaximum()*scale,
            x.getYMinimum()*scale, x.getYMaximum()*scale
            );
    }
}

fn scale_v3 {
    in LVect3d x;
    fout LVect3d;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }

    estimate {
        return new Estimate_v3(
            x.getXMinimum()*scale, x.getXMaximum()*scale,
            x.getYMinimum()*scale, x.getYMaximum()*scale,
            x.getZMinimum()*scale, x.getZMaximum()*scale
            );
    }
}

fn scale_col {
    in Color x;
    fout Color;
    
    parameter double scale;

    init {
        scale = 3*Math.random();
    }

    eval {
        return x.mult(scale);
    }

    estimate {
        return new Estimate_col(
            x.getRMinimum()*scale, x.getRMaximum()*scale,
            x.getGMinimum()*scale, x.getGMaximum()*scale,
            x.getBMinimum()*scale, x.getBMaximum()*scale
            );
    }
}

// ***********
// *** MODULUS
// ***********

fn mod_d {
    in LDouble x;
    fout LDouble;

    eval {
        return new LDouble( x.val - Math.floor(x.val) );
    }

    estimate {
        return new Estimate_d(0,1);
    }
}

fn mod_v2 {
    in LVect2d x;
    fout LVect2d;

    eval {
        return new LVect2d(
            x.x - Math.floor(x.x),
            x.y - Math.floor(x.y)
            );
    }

    estimate {
        return new Estimate_v2(0,1,0,1);
    }
}

fn mod_v3 {
    in LVect3d x;
    fout LVect3d;

    eval {
        return new LVect3d(
            x.x - Math.floor(x.x),
            x.y - Math.floor(x.y),
            x.z - Math.floor(x.z)
            );
    }

    estimate {
        return new Estimate_v3(0,1,0,1,0,1);
    }
}
