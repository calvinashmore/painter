package library.expressions.functions;
group Attractors;
type Expression;

import utils.linear.*;
import utils.pointfield.attractor.*;

description "Functions for strange attractors";

// ***********************
// *** Accessors...
// ***********************

fn getQuadtree {
    fout QT2d;
    in Attractor2 attractor;

    eval {
        return (QT2d) attractor.getQuadtree();
    }
}


// ***********************
// *** Attractor functions
// ***********************

fn PeterDeJong {
    fout Attractor2;

    parameter double a;
    parameter double b;
    parameter double c;
    parameter double d;

    setup {
        if(!built) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
            built = true;
        } else if(parametersChanged()) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
        }
    }

    private boolean built;
    private Attractor2 attractor;

    private class Impl extends AttractorFunction2 {

        public void apply(APoint2d in_val, APoint2d out_val) {

            out_val.x = Math.sin(a*in_val.y) - Math.cos(b*in_val.x);
            out_val.y = Math.sin(c*in_val.x) - Math.cos(d*in_val.y);
        }

        public double derivMagnitude(APoint2d in_val) {

            double d00 = a*Math.sin(a*in_val.y);
            double d01 = b*Math.cos(b*in_val.x);
            double d10 = c*Math.cos(c*in_val.x);
            double d11 = d*Math.sin(d*in_val.y);

            return Math.max(
                    Math.abs(d00) + Math.abs(d01),
                    Math.abs(d10) + Math.abs(d11)
                    );
        }

        public void adjustParameters() {
            a = Math.random()*8 - 4;
            b = Math.random()*8 - 4;
            c = Math.random()*8 - 4;
            d = Math.random()*8 - 4;
        }

        public int getIdealIterations() {return super.getIdealIterations()*4;}
    }


    eval {return attractor;}
}

fn Clifford {
    fout Attractor2;

    parameter double a;
    parameter double b;
    parameter double c;
    parameter double d;

    setup {
        if(!built) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
            built = true;
        } else if(parametersChanged()) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
        }
    }

    private boolean built;
    private Attractor2 attractor;

    private class Impl extends AttractorFunction2 {

        public void apply(APoint2d in_val, APoint2d out_val) {

            out_val.x = Math.sin(a*in_val.y) + b*Math.cos(a*in_val.x);
            out_val.y = Math.sin(c*in_val.x) + d*Math.cos(c*in_val.y);
        }

        public double derivMagnitude(APoint2d in_val) {

            double d00 = -a*Math.sin(a*in_val.y);
            double d01 = b*a*Math.cos(a*in_val.x);
            double d10 = c*Math.cos(c*in_val.x);
            double d11 = -d*c*Math.sin(c*in_val.y);

            return Math.max(
                    Math.abs(d00) + Math.abs(d01),
                    Math.abs(d10) + Math.abs(d11)
                    );
        }

        public void adjustParameters() {
            a = Math.random()*8 - 4;
            b = Math.random()*8 - 4;
            c = Math.random()*8 - 4;
            d = Math.random()*8 - 4;
        }

        public int getIdealIterations() {return super.getIdealIterations()*4;}
    }


    eval {return attractor;}
}

fn Quadratic2_x1 {
    fout Attractor2;

    parameter double[] a;
    parameter double[] b;

    setup {
        if(!built) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
            built = true;
        } else if(parametersChanged()) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
        }
    }

    private boolean built;
    private Attractor2 attractor;

    private class Impl extends AttractorFunction2 {

        public void apply(APoint2d in_val, APoint2d out_val) {

            double x = in_val.x;
            double y = in_val.y;

            out_val.x = x*x*Math.sin(y)*a[0] + x*y*a[1] + y*y*a[2] + x*a[3] + y*a[4] + a[5];
            out_val.y = x*x*Math.cos(y)*b[0] + x*y*b[1] + y*y*b[2] + x*b[3] + y*b[4] + b[5];
        }

        public double derivMagnitude(APoint2d in_val) {

            double x = in_val.x;
            double y = in_val.y;

            double d00 = 2*x*Math.sin(y)*a[0] + y*a[1] + a[3];
            double d01 = 2*y*a[2] + x*a[1] + a[4] + Math.cos(y)*x*x*a[0];
            double d10 = 2*x*Math.cos(y)*b[0] + y*b[1] + b[3];
            double d11 = 2*y*b[2] + x*b[1] + b[4] + Math.cos(y)*x*x*a[0];

            return Math.max(
                    Math.abs(d00) + Math.abs(d01),
                    Math.abs(d10) + Math.abs(d11)
                    );
        }

        public void adjustParameters() {
            a = new double[6];
            b = new double[6];
            for(int i=0;i<6;i++) {
                a[i] = Math.random()*3-1.5;
                b[i] = Math.random()*3-1.5;
            }
        }

        public int getIdealIterations() {return super.getIdealIterations()/2;}
    }


    eval {return attractor;}
}

fn Quadratic2 {
    fout Attractor2;

    parameter double[] a;
    parameter double[] b;

    setup {
        if(!built) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
            built = true;
        } else if(parametersChanged()) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
        }
    }

    private boolean built;
    private Attractor2 attractor;

    private class Impl extends AttractorFunction2 {

        public void apply(APoint2d in_val, APoint2d out_val) {

            double x = in_val.x;
            double y = in_val.y;

            out_val.x = x*x*a[0] + x*y*a[1] + y*y*a[2] + x*a[3] + y*a[4] + a[5];
            out_val.y = x*x*b[0] + x*y*b[1] + y*y*b[2] + x*b[3] + y*b[4] + b[5];
        }

        public double derivMagnitude(APoint2d in_val) {

            double x = in_val.x;
            double y = in_val.y;

            double d00 = 2*x*a[0] + y*a[1] + a[3];
            double d01 = 2*y*a[2] + x*a[1] + a[4];
            double d10 = 2*x*b[0] + y*b[1] + b[3];
            double d11 = 2*y*b[2] + x*b[1] + b[4];

            return Math.max(
                    Math.abs(d00) + Math.abs(d01),
                    Math.abs(d10) + Math.abs(d11)
                    );
        }

        public void adjustParameters() {
            a = new double[6];
            b = new double[6];
            for(int i=0;i<6;i++) {
                a[i] = Math.random()*3-1.5;
                b[i] = Math.random()*3-1.5;
            }
        }

        public int getIdealIterations() {return super.getIdealIterations()/2;}
    }


    eval {return attractor;}
}

fn Cubic2 {
    fout Attractor2;

    parameter double[] a;
    parameter double[] b;

    setup {
        if(!built) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
            built = true;
        } else if(parametersChanged()) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
        }
    }

    private boolean built;
    private Attractor2 attractor;

    private class Impl extends AttractorFunction2 {

        public void apply(APoint2d in_val, APoint2d out_val) {

            double x = in_val.x;
            double y = in_val.y;

            out_val.x =
                    x*x*x*a[0] + x*x*y*a[1] + x*y*y*a[2] + y*y*y*a[3] +
                    x*x*a[4] + x*y*a[5] + y*y*a[6] + x*a[7] + y*a[8] + a[9];
            out_val.y =
                    x*x*x*b[0] + x*x*y*b[1] + x*y*y*b[2] + y*y*y*b[3] +
                    x*x*b[4] + x*y*b[5] + y*y*b[6] + x*a[7] + y*b[8] + b[9];
        }

        public double derivMagnitude(APoint2d in_val) {

            double x = in_val.x;
            double y = in_val.y;

            double d00 = 3*x*x*a[0] + 2*x*y*a[1] +   y*y*a[2] + 2*x*a[4] + y*a[5] + a[7];
            double d01 =   x*x*a[1] + 2*x*y*a[2] + 3*y*y*a[3] + x*a[5] + 2*y*a[6] + a[8];
            double d10 = 3*x*x*b[0] + 2*x*y*b[1] +   y*y*b[2] + 2*x*b[4] + y*b[5] + b[7];
            double d11 =   x*x*b[1] + 2*x*y*b[2] + 3*y*y*b[3] + x*b[5] + 2*y*b[6] + b[8];

            return Math.max(
                    Math.abs(d00) + Math.abs(d01),
                    Math.abs(d10) + Math.abs(d11)
                    );
        }

        public void adjustParameters() {
            a = new double[10];
            b = new double[10];
            for(int i=0;i<10;i++) {
                a[i] = Math.random()*3-1.5;
                b[i] = Math.random()*3-1.5;
            }
        }

        public int getIdealIterations() {return super.getIdealIterations()/2;}
    }
    

    eval {return attractor;}
}

fn Julia2 {
    fout Attractor2;
    parameter Complex c;

    setup {
        if(!built) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
            built = true;
        } else if(parametersChanged()) {
            attractor = new Attractor2(new Impl(), new APoint2d());
            setParametersChanged(false);
        }
    }

    init {
        c = new Complex(-.5+1.5*(Math.random()-Math.random()), 1.5*(Math.random()-Math.random()));
    }

    private boolean built;
    private Attractor2 attractor;

    private class Impl extends AttractorFunction2 {

        @Override
        public void apply(APoint2d in_val, APoint2d out_val) {
//            Complex z = new Complex(in_val.x, in_val.y);
//            Complex z2 = z.sub(c).pow(.5);

            double x = in_val.x - c.x;
            double y = in_val.y - c.y;
            double mag = Math.pow(x*x+y*y, 1.0/4);
            double theta = Math.atan2(y,x)/2;
            if(Math.random() < .5)
                theta += Math.PI;

            out_val.x = mag*Math.cos(theta);
            out_val.y = mag*Math.sin(theta);
        }

        @Override
        public double derivMagnitude(APoint2d in_val) {

            double x = in_val.x;
            double y = in_val.y;
            double theta = Math.atan2(y,x);
            if(Math.random() < .5)
                theta += Math.PI;
            double r3 = 2*Math.pow(y*y+x*x, 3.0/4);
            double sin = Math.sin(theta/2);
            double cos = Math.cos(theta/2);

            double d00 = (y*sin+x*cos)/r3;
            double d01 = -(x*sin-y*cos)/r3;
            double d10 = (x*sin-y*cos)/r3;
            double d11 = (y*sin+x*cos)/r3;

            return Math.max(
                    Math.abs(d00) + Math.abs(d01),
                    Math.abs(d10) + Math.abs(d11));
        }
    }

    eval {return attractor;}
}


