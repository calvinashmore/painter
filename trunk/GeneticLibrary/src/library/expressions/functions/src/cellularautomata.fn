package library.expressions.functions;
group CellularAutomata;
type Expression;

import utils.linear.*;
import utils.linear.grid.*;
import utils.cellularautomata.*;

description "Cellular Automata";

// NOTE: THESE FUNCTIONS EVALUATE ONLY ONCE!

fn cellular_1d1_discrete {
    fout Buffer_d;
    parameter Integer numberInputs;
    parameter Integer colors;

    init {
        Random rand = new Random();
        numberInputs = 2+rand.nextInt(3);
        colors = 2+rand.nextInt(3);
    }

    private transient Buffer_d data;

    private void makeData() {
        data = new Buffer_d(20, 20);
        new CellularAutomata1d(data, numberInputs, colors);

        // scale
        Buffer_d dataLarge = BlurTool.scaleBuffer(data, 100);
        data = new BlurTool(2.0).process(dataLarge, 4);
    }

    eval {
        if(data == null)
            makeData();
        return data;
    }
}

fn cellular_1d2_discrete {
    fout Buffer_d;
    parameter Integer numberInputs;
    parameter Integer colors;

    init {
        Random rand = new Random();
        numberInputs = 2+rand.nextInt(3);
        colors = 2+rand.nextInt(3);
    }

    private transient Buffer_d data;

    private void makeData() {
        data = new Buffer_d(100, 100);
        new CellularAutomata1d2(data, numberInputs, colors);

        // scale
        Buffer_d dataLarge = BlurTool.scaleBuffer(data, 100);
        data = new BlurTool(2.0).process(dataLarge, 4);
    }

    eval {
        if(data == null)
            makeData();
        return data;
    }
}

fn cellular_1d1_cont {
    fout Buffer_d;
    parameter Integer numberInputs;

    init {
        Random rand = new Random();
        numberInputs = 2+rand.nextInt(3);
    }

    private transient Buffer_d data;

    private void makeData() {
        data = new Buffer_d(100, 100);
        new CellularAutomata1d_cont(data, numberInputs);

        // scale
        Buffer_d dataLarge = BlurTool.scaleBuffer(data, 100);
        data = new BlurTool(2.0).process(dataLarge, 4);
    }

    eval {
        if(data == null)
            makeData();
        return data;
    }
}

fn cellular_1d2_cont {
    fout Buffer_d;
    parameter Integer numberInputs;

    init {
        Random rand = new Random();
        numberInputs = 2+rand.nextInt(3);
    }

    private transient Buffer_d data;

    private void makeData() {
        data = new Buffer_d(100, 100);
        new CellularAutomata1d2_cont(data, numberInputs);

        // scale
        Buffer_d dataLarge = BlurTool.scaleBuffer(data, 100);
        data = new BlurTool(2.0).process(dataLarge, 4);
    }

    eval {
        if(data == null)
            makeData();
        return data;
    }
}
