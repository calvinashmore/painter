package library.statements;
group AlongCurves;
type Statement;

import utils.linear.*;
import utils.curves.*;

description "Statements that iterate along curves.";

fn alongCurve_dense_d {

    description "Iterates densely along a LDouble curve";

    parameter Integer n;
    cvar Integer i;
    cvar LDouble x;

    exin CurveUtil.Curve_d curve;
    slin body;

    meta selectionWeight .2;

    init {
        n = 150+new Random().nextInt(100);
    }

    exec {
        i = 0;
        CurveUtil.Curve_d evalCurve = (CurveUtil.Curve_d) curve.evaluate(context);
        while(i < n) {
            double t = 1.0*i/n;
            x = evalCurve.getValue(t);
            body.execute(context);
            i = i+1;
        }
    }
}

fn alongCurve_light_d {

    description "Iterates lightly along a LDouble curve";

    parameter Integer n;
    cvar Integer i;
    cvar LDouble x;

    exin CurveUtil.Curve_d curve;
    slin body;

    meta selectionWeight .5;

    init {
        n = 15+new Random().nextInt(10);
    }

    exec {
        i = 0;
        CurveUtil.Curve_d evalCurve = (CurveUtil.Curve_d) curve.evaluate(context);
        while(i < n) {
            double t = 1.0*i/n;
            x = evalCurve.getValue(t);
            body.execute(context);
            i = i+1;
        }
    }
}


fn alongCurve_dense_v2 {

    description "Iterates densely along a LVect2d curve";

    parameter Integer n;
    cvar Integer i;
    cvar LVect2d x;

    exin CurveUtil.Curve_v2 curve;
    slin body;

    meta selectionWeight .2;

    init {
        n = 150+new Random().nextInt(100);
    }

    exec {
        i = 0;
        CurveUtil.Curve_v2 evalCurve = (CurveUtil.Curve_v2) curve.evaluate(context);
        while(i < n) {
            double t = 1.0*i/n;
            x = evalCurve.getValue(t);
            body.execute(context);
            i = i+1;
        }
    }
}

fn alongCurve_light_v2 {

    description "Iterates lightly along a LVect2d curve";

    parameter Integer n;
    cvar Integer i;
    cvar LVect2d x;

    exin CurveUtil.Curve_v2 curve;
    slin body;

    meta selectionWeight .5;

    init {
        n = 15+new Random().nextInt(10);
    }

    exec {
        i = 0;
        CurveUtil.Curve_v2 evalCurve = (CurveUtil.Curve_v2) curve.evaluate(context);
        while(i < n) {
            double t = 1.0*i/n;
            x = evalCurve.getValue(t);
            body.execute(context);
            i = i+1;
        }
    }
}

fn alongCurve_dense_col {

    description "Iterates densely along a Color curve";

    parameter Integer n;
    cvar Integer i;
    cvar Color x;

    meta selectionWeight .2;

    exin CurveUtil.Curve_col curve;
    slin body;

    init {
        n = 150+new Random().nextInt(100);
    }

    exec {
        i = 0;

        CurveUtil.Curve_col evalCurve = (CurveUtil.Curve_col) curve.evaluate(context);
        while(i < n) {
            double t = 1.0*i/n;
            x = evalCurve.getValue(t);
            body.execute(context);
            i = i+1;
        }
    }
}

fn alongCurve_light_col {

    description "Iterates lightly along a Color curve";

    parameter Integer n;
    cvar Integer i;
    cvar Color x;

    exin CurveUtil.Curve_col curve;
    slin body;

    meta selectionWeight .5;

    init {
        n = 15+new Random().nextInt(10);
    }

    exec {
        i = 0;
        CurveUtil.Curve_col evalCurve = (CurveUtil.Curve_col) curve.evaluate(context);
        while(i < n) {
            double t = 1.0*i/n;
            x = evalCurve.getValue(t);
            body.execute(context);
            i = i+1;
        }
    }
}


